{"version":3,"sources":["components/NavBar.js","screens/LoginScreen.js","screens/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","history","useHistory","className","alt","src","viewBox","xmlns","d","showLogoutButton","onClick","localStorage","clear","push","width","height","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","x1","y1","x2","y2","LoginScren","useState","userName","setUserName","password","setPassword","prefixUrl","setPrefixUrl","isError","setisError","errMsg","setErrMsg","inputClass","errInputClass","useEffect","authInterval","setInterval","console","log","getItem","undefined","window","myWindow","close","clearInterval","htmlFor","id","type","value","placeholder","onChange","e","target","setItem","length","link","open","doLogin","AnyReactComponent","text","HomeScreen","setIsError","inputTag","setInputTag","data","setData","isLoading","setIsLoading","arrSplittedValue","setArrSplittedValue","arrData","counter","splitedValue","split","map","item","trim","url","token","fetch","headers","Accept","Authorization","then","response","json","responseData","attrs","catch","error","submitTagNumber","arrNameValue","arrkeys","Object","keys","obj","key","name","bootstrapURLKeys","defaultCenter","lat","parseFloat","Latitude","lng","Longitude","distanceToMouse","defaultZoom","nameValue","allowZeroExpanded","index","stroke-width","stroke-linecap","stroke-linejoin","class","showAttr","App","exact","path","component","LoginScreen","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e67c4758.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst NavBar = props => {\r\n    const history = useHistory();\r\n\r\n    const logout = () => {\r\n        //remove all local storage\r\n        localStorage.clear();\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <nav className=\"flex items-center justify-between flex-wrap bg-purple-900  p-6\">\r\n            <div className=\"flex items-center flex-shrink-0 text-black mr-6\">\r\n                <img alt=\"Logo\" className=\"w-1/2\" src=\"https://www.datum360.com/assets/img/logo.png\"></img>\r\n            </div>\r\n            <div className=\"block lg:hidden\">\r\n                <button className=\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\">\r\n                    <svg className=\"fill-current h-3 w-3\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><title>Menu</title><path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" /></svg>\r\n                </button>\r\n            </div>\r\n            <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\r\n                <div className=\"text-sm lg:flex-grow\">\r\n                </div>\r\n                <div className={`${props.showLogoutButton ? \"\" : \"hidden\"}`}>\r\n                    <button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded inline-flex items-center\" onClick={() => logout()}>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-log-out\"><path d=\"M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4\"></path><polyline points=\"16 17 21 12 16 7\"></polyline><line x1=\"21\" y1=\"12\" x2=\"9\" y2=\"12\"></line></svg>\r\n                        <span>Logout</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NavBar from '../components/NavBar'\r\n\r\nfunction LoginScren(props) {\r\n  // Declare a new state variable, which we'll call \"count\"\r\n  // const [count, setCount] = useState(0);\r\n  const history = useHistory();\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [prefixUrl, setPrefixUrl] = useState(\"\");\r\n  const [isError, setisError] = useState();\r\n  const [errMsg, setErrMsg] = useState();\r\n  const inputClass = \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:border-purple-900\";\r\n  const errInputClass = \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none border-red-500\";\r\n\r\n\r\n  const doLogin = () => {\r\n    //setting prefix url to localstorage\r\n    localStorage.setItem(\"prefixUrl\", prefixUrl);\r\n\r\n    // validation\r\n    if (userName !== undefined && userName.length > 0 && password.length > 0 && prefixUrl.length > 0) {\r\n      setisError(false);\r\n      let link = `auth/index.php?clientId=${userName}&clientSecret=${password}&prefix_url=${prefixUrl}`;\r\n      window.myWindow = window.open(link, 'targetWindow', `toolbar=no,location=no,status=no,menubar=no,scrollbars=yes,resizable=yes,width=500,height=500`);\r\n    }\r\n    else {\r\n      //setting error \r\n      // setError(\"border-red-500\");\r\n      setisError(true);\r\n      setErrMsg(\"Please fill all the fields\");\r\n    }\r\n  }\r\n\r\n  const closeWindow = (props) => {\r\n    if (window.myWindow !== undefined) {\r\n      window.myWindow.close();\r\n      history.push('/home');\r\n    }\r\n    else {\r\n      history.push('/home');\r\n    }\r\n    console.log(\"inside close window --------->\")\r\n  }\r\n\r\n\r\n\r\n  useEffect((props) => {\r\n    const authInterval = setInterval(() => {\r\n      console.log(\"listening ------------>\")\r\n      if (localStorage.getItem(\"b_token\") != null) {\r\n        console.log(\"b_token found ---------->\" + localStorage.getItem(\"b_token\"))\r\n        closeWindow();\r\n        clearInterval(authInterval)\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(authInterval);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <NavBar showLogoutButton={false}></NavBar>\r\n      <div className=\"w-full max-w-xs login-container mt-5\">\r\n        <form className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">\r\n              Username\r\n          </label>\r\n            <input className={isError ? errInputClass : inputClass}\r\n              id=\"username\" type=\"text\" value={userName} placeholder=\"Enter your username\" onChange={(e) => setUserName(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-4\">\r\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"password\">\r\n              Password\r\n          </label>\r\n            <input className={isError ? errInputClass : inputClass} value={password}\r\n              id=\"password\" type=\"password\" placeholder=\"Enter your password\" onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </div>\r\n          <div className=\"mb-3\">\r\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">\r\n              Prefix URL\r\n          </label>\r\n            <input className={isError ? errInputClass : inputClass} value={prefixUrl}\r\n              id=\"prefixUrl\" type=\"text\" placeholder=\"Enter your prefix url\" onChange={(e) => setPrefixUrl(e.target.value)}\r\n            />\r\n          </div>\r\n          <p className=\"text-center text-red-500\">{isError ? errMsg : \"\"}</p>\r\n          <div className=\"flex\">\r\n            <button className=\"mt-3 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline m-auto\" type=\"button\"\r\n              onClick={() => { doLogin() }}>\r\n              Proceed\r\n      </button>\r\n          </div>\r\n        </form>\r\n        <br>\r\n        </br>\r\n        <p className=\"text-center\">&copy; Datum360 Limited</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default LoginScren;","import React, { useState } from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\nimport NavBar from '../components/NavBar'\r\nimport {\r\n    Accordion,\r\n    AccordionItem,\r\n    AccordionItemHeading,\r\n    AccordionItemButton,\r\n    AccordionItemPanel,\r\n} from 'react-accessible-accordion';\r\n\r\nconst AnyReactComponent = ({ text }) => <div><img alt=\"Marker\" src=\"https://img.icons8.com/fluent/48/000000/marker-storm.png\" />{text}</div>;\r\n\r\nconst HomeScreen = props => {\r\n    const inputClass = \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\";\r\n    const errInputClass = \"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline border-red-500\";\r\n    const [isError, setIsError] = useState();\r\n    const [inputTag, setInputTag] = useState('');\r\n    const [data, setData] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [arrSplittedValue, setArrSplittedValue] = useState([]);\r\n\r\n    const submitTagNumber = () => {\r\n        //reset default value \r\n        setIsError(false);\r\n\r\n        //validation\r\n        if (inputTag !== null && inputTag.length > 0) {\r\n            setIsLoading(true)\r\n            let arrData = [];\r\n            let counter = 0;\r\n            var splitedValue = inputTag.split(\",\").map((item) => {\r\n                return item.trim();\r\n            });\r\n            setArrSplittedValue(splitedValue);\r\n            splitedValue.map((id) => {\r\n                let url = \"https://\" + localStorage.getItem(\"prefixUrl\") + \".pim360.io/api/objects/TAGGED_ITEM/id/\" + id;\r\n                let token = localStorage.getItem(\"b_token\");\r\n                fetch(url, {\r\n                    headers: {\r\n                        Accept: \"application/json\",\r\n                        Authorization: token,\r\n                    }\r\n                }).then(response => {\r\n                    var responseValue = response.json();\r\n                    return responseValue;\r\n                }).then(responseData => {\r\n                    if (responseData.attrs !== undefined && responseData.attrs !== null) {\r\n                        arrData.push(responseData);\r\n                    }\r\n                    else {\r\n                        console.log(responseData);\r\n                    }\r\n                    counter += 1;\r\n                    if (counter === splitedValue.length) {\r\n                        setIsLoading(false);\r\n                        setData(arrData);\r\n                        return\r\n                    }\r\n                }).catch(error => {\r\n                    console.log(\"error -------->\" + error);\r\n                    counter += 1\r\n                    if (counter === splitedValue.length) {\r\n                        setIsLoading(false);\r\n                    }\r\n                })\r\n                return '';\r\n            })\r\n        }\r\n        else {\r\n            setIsError(true);\r\n            console.log(\"show error\");\r\n        }\r\n    }\r\n\r\n    const showAttr = () => {\r\n        let arrNameValue = [];\r\n        data.map((item) => {\r\n            let arrkeys = Object.keys(item.attrs)\r\n            let obj = {};\r\n            arrkeys.map((key) => {\r\n                obj[item.attrs[key].name] = item.attrs[key].value;\r\n                return '';\r\n            })\r\n            arrNameValue.push(obj);\r\n            return '';\r\n        });\r\n        // console.log(arrSplittedValue);\r\n        return <div className=\"flex mb-4\">\r\n            <div className=\"w-1/2 m-h-500px p-5\">\r\n                {arrNameValue.length > 0 &&\r\n                    <div className=\"w-full h-full shadow-lg\">\r\n                        <GoogleMapReact\r\n                            bootstrapURLKeys={{ key: \"AIzaSyDNeF0TGdzD6PN696-ZWgdP7z9ltW0l1QY\" }}\r\n                            defaultCenter={{\r\n                                lat: parseFloat(arrNameValue[0].Latitude),\r\n                                lng: parseFloat(arrNameValue[0].Longitude)\r\n                            }}\r\n                            distanceToMouse={() => { }}\r\n                            defaultZoom={6}\r\n                        >\r\n                            {arrNameValue.map((nameValue) => {\r\n                                return <AnyReactComponent\r\n                                    lat={nameValue.Latitude}\r\n                                    lng={nameValue.Longitude}\r\n                                />\r\n                            })}\r\n                        </GoogleMapReact>\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className=\"w-1/2 m-h-500px\">\r\n                <div className=\"max-w rounded w-full shadow  p-5\">\r\n                    <p className=\"text-xl font-bold mb-3\">Attributes</p>\r\n                    <Accordion className=\"border-0\" allowZeroExpanded >\r\n                        {arrNameValue.map((item, index) => {\r\n                            return <AccordionItem className=\"shadow-md mb-3\" key={item.Latitude}>\r\n                                <AccordionItemHeading className=\"bg-gray-400 p-2\">\r\n                                    <AccordionItemButton className=\"w-full border-none outline-none focus:border-0 inline-flex\">\r\n                                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-arrow-right\"><line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line><polyline points=\"12 5 19 12 12 19\"></polyline></svg>\r\n                                        &emsp;\r\n                                        {arrSplittedValue[index]}\r\n                                    </AccordionItemButton>\r\n                                </AccordionItemHeading>\r\n                                <AccordionItemPanel>\r\n                                    <table class=\"table-auto w-full\">\r\n                                        <tbody>\r\n                                            {Object.keys(item).map((key) => {\r\n                                                return <tr>\r\n                                                    <td class=\"border px-4 py-2\">{key}</td>\r\n                                                    <td class=\"border px-4 py-2\">{item[key]}</td>\r\n                                                </tr>\r\n                                            })}\r\n                                        </tbody>\r\n                                    </table>\r\n                                </AccordionItemPanel>\r\n                            </AccordionItem>\r\n                        })}\r\n                    </Accordion>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <NavBar showLogoutButton={true}></NavBar>\r\n            {isLoading ?\r\n                <div className=\"popUpContainer\">\r\n                    <div className=\"loader\"></div>\r\n                </div>\r\n                : \"\"}\r\n            <div className=\"p-10\">\r\n                <div className=\"w-full max-w-xs\">\r\n                    <form className=\"bg-white rounded pt-6 pb-8 mb-4\">\r\n                        <div>\r\n                            <div className=\"inline-block\">\r\n                                <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"username\">\r\n                                    Tag Number\r\n                            </label>\r\n                                <input className={isError ? errInputClass : inputClass} value={inputTag}\r\n                                    id=\"tagNumber\" type=\"text\" placeholder=\"Enter your tag number\" onChange={(e) => setInputTag(e.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className=\"inline-block ml-5\">\r\n                                <button className=\"bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none m-auto\" type=\"button\"\r\n                                    onClick={() => { submitTagNumber() }}\r\n                                >\r\n                                    Submit\r\n                             </button>\r\n                            </div>\r\n                        </div>\r\n                        {isError ? <p className=\"text-red-500 pl-2 text-xs pt-1\">Tag name is required </p> : \"\"}\r\n                    </form>\r\n                </div>\r\n                {data !== undefined && data.length > 0 &&\r\n                    <div>\r\n                        {showAttr()}\r\n                    </div>\r\n                }\r\n                <p className=\"text-center\">&copy; Datum360 Limited</p>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default HomeScreen;","import React from 'react';\r\nimport LoginScreen from './screens/LoginScreen';\r\nimport HomeScreen from './screens/HomeScreen';\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Route exact path=\"/\" component={LoginScreen} />\r\n        <Route exact path=\"/home\" component={HomeScreen} />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}